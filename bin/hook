#!/usr/bin/env bash

#
# The global hook CLI.
#
# Author: Tyll Wei√ü <weiss@sitegeist.de>
#
HOOK_DIR="$HOME/.sitegeist-hooks"

#
# Include helper utils.
#
source $HOOK_DIR/utils/typography

#
# Print the general cli usage guide.
#
function print_help() {
	echo "${bold}Hook CLI.${normal}

${underline}General Usage:${nounderline}
'cd' into your target directory which contains your local '.git/' repository and run 'hook'.

${underline}List of all available commands:${nounderline}
help		Prints the general CLI usage.
help:hooks	Prints info about all hooks.
self-update	Update all hooks which where installed via the CLI.

Need help or got an issue? Report bugs at ${underline}https://github.com/sitegeist/git-hooks/issues${nounderline}."
}

#
# Print the descriptive guide for all hooks.
#
function print_hook_help() {
	echo "${bold}Hook CLI.${normal}

${underline}List of all installed hooks:${nounderline}
pre-commit		Lints all changed files and aborts the commit if errors are found as well as creates a npm-shrinkwrap if your package.json has been changed.
post-merge		Updates your npm or composer dependencies if the respective meta-file was changed.
prepare-commit-msg	Evaluates the commit message against the TYPO3 commit message guidelines."
}

#
# Self-Update mechanism.
#
function update__hooks() {
	p_info "Updating the git-hooks..."

	cd "$HOOK_DIR" && git pull origin master && rm .last_modified && touch .last_modified && cd
}

#
# Install the git-hooks if the current pwd has a .git/ dir.
#
function install_hooks() {
	if [ "$(ls -R 2>/dev/null -A `pwd`/.git)" ]; then
		p_info "Installing git hooks in the current working directory."

		HOOKS=$HOOK_DIR/hooks/*
		for f in $HOOKS
		do
			if [ -f "`pwd`/.git/hooks/$(basename $f)" ]; then
				p_warn "Skipping hook '$(basename $f)' because it's already in place."
			else
				p_info "Linking $(basename $f) to `pwd`/.git/hooks/..."
				ln -s ${f} `pwd`/.git/hooks/
			fi
		done

		p_success "Done."
	else
		p_fail "Fatal Error: Your current directory has no '.git/' folder, please change into your root package directory and run this command again."

		exit 1
	fi
}

#
# Create the last_modified file, if not currently present.
#
if [ ! -f "$HOOK_DIR/.last_modified" ]; then
	touch "$HOOK_DIR/.last_modified"
fi

#
# Automatically update the hooks every 30 days.
#
if test `find "$HOOK_DIR/.last_modified" -mmin +43200`; then
	update__hooks
fi

#
# Depending on the passed argument, either print the usage guidelines, update the hooks or install them.
#
if [ $# -eq 0 ]; then
		print_help

		exit 1
	else
		case "$1" in
			"--help" | "-h" | "help")
				print_help
				;;
			"help:hooks")
				print_hook_help
				;;
			"install")
				install_hooks
				;;
			"self-update")
				update__hooks
				;;
			*)
				p_fail "Fatal Error: Unknown argument '$1'. For help regarding the Hook CLI execute 'hook help'."

				exit 1
				;;
		esac
fi

exit 0
