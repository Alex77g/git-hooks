#!/usr/bin/env bash

#
# Commit-Msg hook
# Responsible for testing the commit message against the TYPO3 guidelines.
#
# Author: Tyll Weiß <weiss@sitegeist.de>, Max Strübing <struebing@sitegeist.de>
#
HOOK_DIR="$HOME/.sitegeist-hooks"
WORKING_DIR=$(git rev-parse --show-toplevel)
CONFIG_PATH="$WORKING_DIR/.hook.yml"
COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat $COMMIT_MSG_FILE)
GIT_INTERNAL_MESSAGES=("Merge " "Revert ")
PRIMARY_TAGS=("\[FEATURE\] " "\[TASK\] " "\[BUGFIX\] " "\[DOCS\] " "\[CLEANUP\] ")
SECONDARY_TAGS=("\[!!!\]" "\[WIP\]")

#
# Include helper utils.
#
source $HOOK_DIR/utils/beginsWithAny
source $HOOK_DIR/utils/executeHookExtension
source $HOOK_DIR/utils/parseYaml

#
# Logs out the error message and commit guidelines.
#
function commitMessageGuide() {
	echo "The 'commit-msg' hook has found issues in your commit message.

Your commit message: "$COMMIT_MSG"

A commit message should begin with '[FEATURE]', '[TASK]', '[BUGFIX]', '[DOCS]' or '[CLEANUP]'.
Additionally you can prepend '[!!!]' for breaking changes or '[WIP]' for changes that aren't fully finished.

If this behavior is not intended, please open a issue containing your commit message on the following bug tracker.
https://github.com/sitegeist/git-hooks/issues\n"
}

#
# Appends the issue number of the branch to the commit message.
# Format ${BRANCH_TYPE}/${ISSUE_NUMBER}/${DESCRIPTION}
#
function appendIssueNumberToCommitMessage() {
	BRANCH_NAME=$(git symbolic-ref --short HEAD)
	BRANCHES_TO_SKIP=(master develop)

	if beginsWithAny "$BRANCH_NAME" "${BRANCHES_TO_SKIP[@]}"; then
			exit 0
		else
			ISSUE_NUMBER=$(grep -o '\/[0-9]*\/' <<< $BRANCH_NAME)

			# Remove slashes
			# ToDo: This should be solved by the regexp also.
			ISSUE_NUMBER=${ISSUE_NUMBER%/}
			ISSUE_NUMBER=${ISSUE_NUMBER:1}

			if [[ ! -z $ISSUE_NUMBER ]]; then
				printf "\n\nrefs #$ISSUE_NUMBER" >> "$COMMIT_MSG_FILE"
			fi
	fi
}

#
# Appends the feature branch ticket number to the message and lets the commit message succeed.
#
function succeedCommitMessage() {
	appendIssueNumberToCommitMessage

	if fileExists $CONFIG_PATH; then
		eval $(parseYaml $CONFIG_PATH "CONFIG_")
		executeHookExtension "commit-msg" $CONFIG_extend_commit_msg $@
	fi

	exit 0
}

#
# Parse the config file.
#
if fileExists $CONFIG_PATH; then
	eval $(parseYaml $CONFIG_PATH "CONFIG_")
fi

#
# If the git commit is an internal git commit (f.e. a merge commit), let the commit succeed.
#
if beginsWithAny "$COMMIT_MSG" "${GIT_INTERNAL_MESSAGES[@]}"; then
	exit 0
fi

#
# If the repository is f.e. in an ongoing rebase process,
# exit with code 0 since the user can't commit in this state anyway.
#
if [ $(git rev-parse --abbrev-ref HEAD) == "HEAD" ]; then
	exit 0
fi

#
# If an option in the config file is set
#
if [ -n "$CONFIG_commitmsg_regex" ]; then
    
    #
    # Check if the message fulfills the given regex
    #
    if grep -o "$CONFIG_commitmsg_regex" <<< "$COMMIT_MSG"; then
        succeedCommitMessage
    fi

else

    #
    # Check if the message begins with a primary prefix tag.
    #
    if beginsWithAny "$COMMIT_MSG" "${PRIMARY_TAGS[@]}"; then
                    succeedCommitMessage

    #
    # If nor primary tag was found, search for secondary prefix tags
    #
    elif beginsWithAny "$COMMIT_MSG" "${SECONDARY_TAGS[@]}"; then
                    # Substring the first five chars, to remove the secondary prefix tag.
                    # ToDo: This not reliable as soon as we introduce a secondary prefix with more or less than 5 chars.
                    COMMIT_MSG_WO_SECONDARY="${COMMIT_MSG:5}"

                    #
                    # Make sure that the secondary prefix tag is immediately followed by a primary one.
                    #
                    if beginsWithAny "$COMMIT_MSG_WO_SECONDARY" "${PRIMARY_TAGS[@]}"; then
                            succeedCommitMessage
                    fi
    fi
fi


#
# If the script hasn't exited yet, we should abort the commit and display the commit message guidelines.
#
commitMessageGuide

exit 1
